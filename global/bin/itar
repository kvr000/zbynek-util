#!/usr/bin/env python3

# Interactive and non-interactive utility to browse compressed and encrypted tarfiles, typically for password management.
# Author: Zbynek Vyskovsky, kvr000@gmail.com, https://github.com/kvr000/zbynek-util/

import sys
import os
import io
import subprocess
import re
import tarfile
import hashlib
import base64

from typing import List


def decrypt_gpg(filename):
    #gpg = gnupg.GPG()
    pipe_read, pipe_write = os.pipe()
    process = subprocess.Popen(['gpgphe', '-d', filename], stdout = pipe_write)
    os.close(pipe_write)
    return io.BytesIO(os.fdopen(pipe_read, 'rb').read())

def openTar(file):
    return tarfile.open(None, 'r', fileobj = file)

class Main:
    filename: str | None = None
    infile: str | None = None
    filters: list[re.Pattern] | None = None
    keys: list[str] | None = None


    def run(self, args) -> int:
        exit: int | None = self.setup(args)
        if exit is not None:
            return exit
        return self.execute()


    def setup(self, args) -> int | None:
        if len(sys.argv) < 2 or len(sys.argv) > 5:
            print("usage: itar tar-archive [ file filters keys ] (optionally gzip/bzip2/xz/zstd-ed and/or gpg-ed)")
            sys.exit(1)

        filename = sys.argv[1]
        if filename.endswith('.gpg'):
            tarFd = decrypt_gpg(filename)
        else:
            tarFd = open(filename)
        self.tar = openTar(tarFd)

        if len(sys.argv) > 2:
            self.infile = sys.argv[2] if len(sys.argv) >= 3 else None
            self.filters = [ re.compile(arg) for arg in sys.argv[3].split(',') ] if len(sys.argv) >= 4 else None
            self.keys = sys.argv[4].split(',') if len(sys.argv) >= 5 else None
        return None


    def execute(self) -> int:
        if self.infile is not None:
            return self.executeExtract()
        else:
            return self.executeInteractive()


    def executeExtract(self) -> int:
        entry = self.tar.extractfile(self.infile)
        content = entry.read().decode('utf-8')
        if self.filters is None:
            print(content)
        else:
            found = None
            for line in content.splitlines():
                if self.filters is None or all(filter.search(line) for filter in self.filters):
                    found = line
                    break
            if found is None:
                raise KeyError("File does not contain filtered line")
            if self.keys is None:
                print(found)
            else:
                pairs = dict(x.split('=', 2) for x in re.split('\s+', found))
                for key in self.keys:
                    if key in pairs:
                        print(pairs[key])
                    else:
                        raise KeyError(f"Key not found in file: key={key}")
        return 0


    def executeInteractive(self) -> int:
        self.interactiveCommand_l([])
        while True:
            print("itar$ ", end = "")
            try:
                if (line := input()) is None:
                    break
            except EOFError:
                return 0
            if (match := re.search('^(\S+)\s*(.*?)\s*$', line)) is None:
                continue
            commandFunction = 'interactiveCommand_' + match[1]
            commandArgs = re.split('\s+', match[2])
            if not hasattr(self, commandFunction):
                self.interactive_invalidCommand(match[1])
                continue
            getattr(self, commandFunction)(commandArgs)


    def interactiveCommand_l(self, args) -> None:
        """list files"""
        filters = list(map(re.compile, args))
        for f in sorted(self.tar.getnames()):
            if all(rex.search(f) for rex in filters):
                print(f)

    def interactiveCommand_s(self, args) -> None:
        """save file to a file"""
        if len(args) != 1:
            print("Usage: s filename")
            return
        try:
            entry = self.tar.extract(args[0])
        except KeyError as ex:
            print(f"Entry not found: {args[0]}\n\t{ex}")
            return

    def interactiveCommand_c(self, args) -> None:
        """ prints file """
        if len(args) != 1:
            print("Usage: c filename")
            return
        content = self.interactive_readEntry(args[0])
        if content is not None:
            print(content)

    def interactiveCommand_f(self, args) -> None:
        """ finds string in file """
        if len(args) < 2:
            print("Usage: f filename regexp...")
            return
        filters: list[re.Pattern] = list(map(re.compile, args[1:]))
        content = self.interactive_readEntry(args[0])
        if content is not None:
            for line in content.splitlines():
                if all(filter.search(line) for filter in filters):
                    print(line)

    def interactiveCommand_k(self, args) -> None:
        """ finds string in file """
        if len(args) != 1:
            print("Usage: k suffix")
            return
        salt = self.interactive_readEntry("pw/_")
        if salt is None:
            return
        hasher = hashlib.sha3_384((salt + '-' + args[0]).encode('utf-8'))
        print(base64.urlsafe_b64encode(hasher.digest()).decode('utf-8'))

    def interactiveCommand_exec(self, args) -> None:
        """ executes file """
        if len(args) != 1:
            print("Usage: exec file")
            return
        content = self.interactive_readEntry(args[0])
        if content is None:
            return
        shell = subprocess.Popen(
                [ os.environ['SHELL'] ],
                stdin = subprocess.PIPE,
                text = True
        )
        shell.stdin.write(content) # type: ignore
        shell.stdin.close() # type: ignore
        exit = shell.wait()
        if exit != 0:
            print(f"Process exited with code: exit={exit}")

    def interactiveCommand_q(self, args) -> None:
        raise SystemExit(0)

    def interactive_invalidCommand(self, name) -> None:
        print(f"""invalid command: {name}
Commands:
	l [pattern...]		list files
	c file		    	cat file
	f file regexp		find in file
	s file		    	save file
	k string	    	generate code for string (url)
	exec		    	execute as command
	q			quit
""")

    def interactive_readEntry(self, filename) -> str | None:
        try:
            entry = self.tar.extractfile(filename)
            return entry.read().decode('utf-8')
        except KeyError as ex:
            print(f"Entry not found: {filename}\n\t{ex}")
        except Exception as ex:
            print(f"Error reading entry: {filename}\n\t{ex}")
        return None

    def list_files(self, filename) -> list[str]:
        with tarfile.open(filename, 'r') as tar:
            return sorted(tar.getnames())


sys.exit(Main().run(sys.argv))
