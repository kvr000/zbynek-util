#!/usr/bin/env python3

# Utility to load environment from .env files, replacing placeholders and running specified program.

import os
import re
import subprocess
import sys
from pathlib import Path


VAR_PATTERN = re.compile(r"\$\{([^}]+)\}")


def load_env_file(path: Path):
    """Parse KEY=VALUE lines from a .env file, ignoring comments and blanks."""
    env = {}
    with path.open(encoding="utf-8") as f:
        for line in f:
            line = line.strip()
            if not line or line.startswith("#") or "=" not in line:
                continue
            key, value = line.split("=", 1)
            env[key.strip()] = value.strip().strip('"').strip("'")
    return env


def expand_placeholders(env: dict, base_env: dict):
    """
    Replace ${VAR} placeholders in env values using:
      - already defined env values (including earlier ones in the same file)
      - base_env (system environment)
    """
    def replacer(match):
        var = match.group(1)
        return env.get(var, base_env.get(var, match.group(0)))

    changed = True
    # Resolve recursively until no change happens
    while changed:
        changed = False
        for k, v in list(env.items()):
            new_v = VAR_PATTERN.sub(replacer, v)
            if new_v != v:
                env[k] = new_v
                changed = True
    return env


def main():
    if len(sys.argv) < 2:
        print("Usage: run_with_env.py [files.env ...] command [args...]")
        sys.exit(122)

    env_files = []
    cmd_start = 0
    for i, arg in enumerate(sys.argv[1:], start=1):
        if arg.endswith(".env"):
            env_files.append(Path(arg))
        else:
            cmd_start = i
            break

    if not cmd_start:
        print("Error: No command specified after .env files.")
        sys.exit(122)

    # Load environment variables
    merged_env = os.environ.copy()
    for f in env_files:
        if f.exists():
            new_env = load_env_file(f)
            # Expand placeholders using existing and new env
            merged_env.update(expand_placeholders(new_env, merged_env))
        else:
            print(f"Warning: Env file not found: {f}")

    # Remaining args form the command to run
    cmd = sys.argv[cmd_start:]
    print(f"Running: {' '.join(cmd)}")
    result = subprocess.run(cmd, env=merged_env)
    sys.exit(result.returncode)


if __name__ == "__main__":
    main()
