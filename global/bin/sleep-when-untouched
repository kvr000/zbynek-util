#!/usr/bin/env python3

# Suspends computer to RAM when files disappear or are untouched for more than 130 seconds

import re
import os
import time
import subprocess
import sys
import platform
from typing import Optional


class Main:
    files: list[str] = list()
    timeout: int = 130

    def run(self, args) -> int:
        exit: int | None = self.setup(args)
        if exit is not None:
            return exit
        return self.execute()


    def setup(self, args) -> Optional[int]:
        if len(sys.argv) < 2:
            print("usage: suspend-when-untouched file...")
            return 122

        self.files = sys.argv[1:]
        return None

    def execute(self) -> int:
        self.wait_until_files_old()
        #print("done")
        self.suspend_to_ram()
        return 0

    def wait_until_files_old(self) -> None:
        while True:
            latest: int = self.get_latest()
            current_time: int = time.time()
            if latest is None or (sleep := (latest + self.timeout) - current_time) <= 0:
                return
            time.sleep(sleep)

    def get_latest(self) -> Optional[int]:
        latest: int = None
        for file in self.files:
            if (mtime := self.file_last_modified(file)) is not None and (latest is None or mtime > latest):
                latest = mtime

        return latest

    def file_last_modified(self, filepath):
        try:
            return os.path.getmtime(filepath)
        except OSError:
            # If the file does not exist, return None
            return None

    def suspend_to_ram(self):
        if re.match(".*-Windows[A-Z]*$", platform.platform()):
            command = ["rundll32.exe", "powrprof.dll", "SetSuspendState", "Sleep"]
        else:
            command = ["systemctl", "suspend"]
        if (proc := subprocess.run(command)).returncode != 0:
            raise OSError("Failed to invoke suspend: exit=" + str(proc.returncode) + " : " + str(proc.args))


if __name__ == "__main__":
    sys.exit(Main().run(sys.argv))
